
TRIAL 1 : Use AMI suggested on Kaggle
---------------------------------------------------------

*Make AWS instance out of AMI*
1. Switch region to N. California
1.5 Configure security group

+ Inbound Rules
SSH | TCP | 22 | Custom | 0.0.0.0/0
Custom TCP Rule | TCP | 4040 | Custom | 0.0.0.0/0 | spark
Custom TCP Rule | TCP | 7180 | Custom | 0.0.0.0/0 | cloudera manager
Custom TCP Rule | TCP | 8080 | Custom | 0.0.0.0/0 | web server
Custom TCP Rule | TCP | 8888 | Custom | 0.0.0.0/0 | jupyter notebook
Custom TCP Rule | TCP | 10000 | Custom | 0.0.0.0/0 | hive
Custom TCP Rule | TCP | 50070 | Custom | 0.0.0.0/0 | hadoop
--> this means any IP address can come in

+ Inbound Rules (can use default)
All traffic | All | whatever | Custom 0.0.0.0/0
--> this means I allow myself to go anywhere

2. Launch instance, search community AMI
3. ami-b141a2f5 
5. select GPU instance (g2.2 xlarge)  (8 vCPUs, 15 GiB Memory, 1*60 SSD Instance Storage, High Network Performance)
AWS may have a service limit, check "Limits" from the left column. Request a new limit.
6. protect against accidental termination
7. download .pem key file
8. check price and launch
9. convert .pem file into .ppk file locally using putty
---------------------------------------------------------

*Launching Instance*
10.launch through putty using Downloads/facial_key_points_20171027_3.ppk 
11.use ubuntu@.....amazonaws.com , NOT root@...com
12.passphrase: todd
---------------------------------------------------------

*moving data files form local computer to AWS*

1. Download pscp.exe
https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html

2. Launch windows command prompt
3. Navigate to the directory where pscp.exe is
C:\Program Files\PuTTY

4. use pscp to upload files to root directory
pscp.exe -i <ppk path> <kaggle csv file path> <root@...com>:<AWS root directory>
pscp.exe -i C:\Users\chuco\Downloads\facial_key_points_20171027_3.ppk "F:\001_Learn_UCB\207_MachineLearningIntro\Final_Project\kaggle_data\*" ubuntu@ec2-54-183-194-213.us-west-1.compute.amazonaws.com:

5. when prompted for passphrase, use "todd"

---------------------------------------------------------

*setup Configuration using github code*

# option 1
$./AWSGPU_DeepLearning/setup.sh
# option 2 line by line except the (# download data files and save them under /data) part
# https://github.com/wendykan/AWSGPU_DeepLearning/blob/master/setup.sh

# Test run some code
# option 1 
$python AWSGPU_DeepLearning/kfkd.py
# option 2 run code line by line
$ipython

---------------------------------------------------------

*install other necessary python packages*
sudo apt-get install libpng12-dev
sudo apt-get install libfreetype6-dev

sudo pip install matplotlib
---------------------------------------------------------

*download cuDNN

1. Login to Nvidia website
https://developer.nvidia.com/rdp/cudnn-download

2. Download latest cuDNN to local

3. windows command prompt -- upload from local to AWS instance using pscp (refer to earlier notes, and remember to replace DNS)

pscp.exe -i C:\Users\chuco\Downloads\facial_key_points_20171027_3.ppk "F:\001_Learn_UCB\207_MachineLearningIntro\Final_Project\libcudnn7_7.0.3.11-1+cuda9.0_amd64.deb" ubuntu@ec2-54-183-194-213.us-west-1.compute.amazonaws.com:

pscp.exe -i C:\Users\chuco\Downloads\facial_key_points_20171027_3.ppk "F:\001_Learn_UCB\207_MachineLearningIntro\Final_Project\libcudnn7-doc_7.0.3.11-1+cuda9.0_amd64.deb" ubuntu@ec2-54-183-194-213.us-west-1.compute.amazonaws.com:

pscp.exe -i C:\Users\chuco\Downloads\facial_key_points_20171027_3.ppk "F:\001_Learn_UCB\207_MachineLearningIntro\Final_Project\libcudnn7-dev_7.0.3.11-1+cuda9.0_amd64.deb" ubuntu@ec2-54-183-194-213.us-west-1.compute.amazonaws.com:

4. use todd when passphrase pop up

5. install cuDNN on AWS 
(http://developer2.download.nvidia.com/compute/machine-learning/cudnn/secure/v7.0.3/prod/Doc/cuDNN-Installation-Guide.pdf?Ht2jvHB-X-oMT65SNQOQO8bN2YCbp2apgSimxTpiD4CgnMtUZUWWguWbb1KVuux9sDuuWbUbZyRgQj1ppES_HPf5Ik-DxrGOrNkPjFKZ73O1-QSsEIxbx-VmNKXuIFRKM5QrIFF-0iRF8NMVAgLGzcC4rLzroZn_4elZ2Sb7h_0O7tCFbcUIEzjLdONbdmejuQ) 
(page 6)

# install runtime library
sudo dpkg -i ~/libcudnn7_7.0.3.11-1+cuda9.0_amd64.deb
# install dev library
sudo dpkg -i ~/libcudnn7-dev_7.0.3.11-1+cuda9.0_amd64.deb
# install code library
sudo dpkg -i ~/libcudnn7-doc_7.0.3.11-1+cuda9.0_amd64.deb


 1. Copy the cuDNN sample to a writable path.
$cp -r /usr/src/cudnn_samples_v7/ $HOME
 2. Go to the writable path.
$ cd $HOME/cudnn_samples_v7/mnistCUDNN
 3. Compile the mnistCUDNN sample.
$make clean && make
 4. Run the mnistCUDNN sample.
$ ./mnistCUDNN


# MISCELLANEOUS BELOW THIS LINE
---------------------------------------------------------
ps -ef | grep -i Hadoop

# check ubuntu version
lsb_release -a
---------------------------------------------------------
*python check locally installed modules*

import pip
installed_packages = pip.get_installed_distributions()
installed_packages_list = sorted(["%s==%s" % (i.key, i.version)
     for i in installed_packages])
print(installed_packages_list)

---------------------------------------------------------
['apt-xapian-index==0.45', 'argparse==1.2.1', 'chardet==2.0.1', 'cheetah==2.4.4', 'cl  oud-init==0.7.5', 'colorama==0.2.5', 'configobj==4.7.2', 'cython==0.22', 'decorator==  3.4.0', 'gdbn==0.1', 'gnumpy==0.2', 'html5lib==0.999', 'ipython==3.1.0', 'joblib==0.1  1', 'jsonpatch==1.3', 'jsonpointer==1.0', 'landscape-client==14.12', 'lasagne==0.2.de  v1', 'nolearn==0.6.0', 'nose==1.3.1', 'numpy==1.8.2', 'oauth==1.0.1', 'pam==0.4.2', '  pandas==0.16.0', 'pillow==2.3.0', 'prettytable==0.7.2', 'pycups==1.9.66', 'pycurl==7.  19.3', 'pygobject==3.12.0', 'pylearn2==0.1dev', 'pyopenssl==0.13', 'pyserial==2.6', '  pysmbc==1.0.14.1', 'python-apt==0.9.3.5ubuntu1', 'python-dateutil==2.4.2', 'python-de  bian==0.1.21-nmu2ubuntu2', 'pytz==2015.2', 'pyyaml==3.10', 'pyzmq==14.5.0', 'requests  ==2.2.1', 'scikit-learn==0.19.1', 'scipy==0.13.3', 'six==1.11.0', 'ssh-import-id==3.2  1', 'system-service==0.1.6', 'tabulate==0.8.1', 'theano==0.8.2', 'twisted-core==13.2.  0', 'twisted-names==13.2.0', 'twisted-web==13.2.0', 'urllib3==1.7.1', 'wsgiref==0.1.2  ', 'zope.interface==4.0.5']



---------------------------------------------------------
ubuntu@ec2-52-53-182-25.us-west-1.compute.amazonaws.com

# FK_1 instance
ubuntu@ec2-52-53-235-91.us-west-1.compute.amazonaws.com




TRIAL 2 : Start from Fresh ubuntu 14.04 instance
install theano and lasagne and data from scratch
---------------------------------------------------------
http://markus.com/install-theano-on-aws/

# AWS EC2 console
# set location to N.California (top right)
# use AMI  ami-df6a8b9b, ubuntu 14.04, 
# g2.2xlarge
# use w205 hadoop cluster security group

# update default packages
sudo apt-get update
sudo apt-get -y dist-upgrade 

# create new screen called theano
screen -S “theano” 

# install all dependencies
sudo apt-get install -y gcc g++ gfortran build-essential git wget linux-image-generic libopenblas-dev python-dev python-pip python-nose python-numpy python-scipy  

# install the bleeding-edge version of Theano
sudo pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git  

# grab 7.0 cuda toolkit
sudo wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.0-28_amd64.deb 

# depackagsudo dpkg -i cuda-repo-ubuntu1404_7.0-28_amd64.deb 

# depackage cuda
sudo dpkg -i cuda-repo-ubuntu1404_7.0-28_amd64.deb 

# add package and install cuda driver
sudo apt-get update
sudo apt-get install -y cuda  

#update the path to include cuda nvcc and ld_library_path
echo -e "\nexport PATH=/usr/local/cuda/bin:$PATH\n\nexport LD_LIBRARY_PATH=/usr/local/cuda/lib64" >> .bashrc 

#reboot system for cuda to load
sudo reboot
# wait a little bit for reboot then ssh back into instance

# search for cuda samples
sudo find / -name "cuda-install-samples-*"
ls /usr/local/cuda/bin/ # make sure to replace the following line of install code to match name of cuda-install-samples-???.sh

# install included samples and test data
cuda-install-samples-8.0.sh ~/
cd NVIDIA\_CUDA-8.0\_Samples/1\_Utilities/deviceQuery  
make  
./deviceQuery
# make sure GPU exists 

# set up the theano config file to use gpu by default
echo -e "\n[global]\nfloatX=float32\ndevice=gpu\n[mode]=FAST_RUN\n\n[nvcc]\nfastmath=True\n\n[cuda]\nroot=/usr/local/cuda" >> ~/.theanorc 


---------------------------------------------------------

#install other necessary python packages
sudo apt-get install libpng12-dev
sudo apt-get install libfreetype6-dev

sudo pip install matplotlib 
sudo pip install pandas 
sudo apt-get install ipython

#sudo pip install jupyter
python -m pip install jupyter
---------------------------------------------------------

# install dependencies such as Theano and Lasagne
sudo pip install -r https://raw.githubusercontent.com/dnouri/kfkd-tutorial/master/requirements.txt

# test MNIST example
cd src/lasagne/examples/
python mnist.py

---------------------------------------------------------

# move data files form local computer to AWS (windows only)

#1. Download pscp.exe
https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html

#2. Launch windows command prompt
#3. Navigate to the directory where pscp.exe is
C:\Program Files\PuTTY

#4. use pscp to upload files to root directory
#pscp.exe -i <ppk path> <kaggle csv file path> <root@...com>:<AWS root directory>
pscp.exe -i C:\Users\chuco\Downloads\FK_1.ppk "F:\001_Learn_UCB\207_MachineLearningIntro\Final_Project\kaggle_data\*" ubuntu@ec2-52-53-235-91.us-west-1.compute.amazonaws.com:

#5. if prompted for passphrase, use "todd", or whatever passphrase you set for your key file

#6. move all data files into /data
cd ~
mkdir data
mkdir data//kaggle-facial-keypoint-detection

#7. try Kaggle competition example
python kfkd.py 
# if kfkd.py not found, paste script from tutorial
# http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/
vi kfkd.py #and paste it in
---------------------------------------------------------
sudo apt-get autoclean # less powerful
sudo apt-get -s autoclean # simulate
sudo apt-get clean # more powerful
---------------------------------------------------------